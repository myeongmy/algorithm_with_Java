//백준 1707번
/*문제
그래프의 정점의 집합을 둘로 분할하여, 각 집합에 속한 정점끼리는 서로 인접하지 않도록 분할할 수 있을 때, 그러한 그래프를 특별히 이분 그래프 (Bipartite Graph) 라 부른다.

그래프가 입력으로 주어졌을 때, 이 그래프가 이분 그래프인지 아닌지 판별하는 프로그램을 작성하시오.

입력
입력은 여러 개의 테스트 케이스로 구성되어 있는데, 첫째 줄에 테스트 케이스의 개수 K(2≤K≤5)가 주어진다. 각 테스트 케이스의 첫째 줄에는 그래프의 정점의 개수 V(1≤V≤20,000)와 간선의 개수 E(1≤E≤200,000)가 빈 칸을 사이에 두고 순서대로 주어진다. 각 정점에는 1부터 V까지 차례로 번호가 붙어 있다. 이어서 둘째 줄부터 E개의 줄에 걸쳐 간선에 대한 정보가 주어지는데, 각 줄에 인접한 두 정점의 번호가 빈 칸을 사이에 두고 주어진다.

출력
K개의 줄에 걸쳐 입력으로 주어진 그래프가 이분 그래프이면 YES, 아니면 NO를 순서대로 출력한다.*/

package 백준;

import java.util.*;

public class N_1707 {

	static void dfs(int v, int color, ArrayList<Integer>[] adlist, int[] c) {
		if (c[v] != 0)
			return;
		c[v] = color;

		for (int a : adlist[v]) {
			if (c[a] == 0)
				dfs(a, 3 - color, adlist, c);
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner s = new Scanner(System.in);
		int T = s.nextInt();
		for (int i = 0; i < T; i++) {
			int V = s.nextInt();
			int E = s.nextInt();
			int[] c = new int[20001];
			ArrayList<Integer>[] adlist = (ArrayList<Integer>[]) new ArrayList[V + 1];
			for (int j = 1; j <= V; j++)
				adlist[j] = new ArrayList<Integer>();
			for (int j = 0; j < E; j++) {
				int a = s.nextInt();
				int b = s.nextInt();
				adlist[a].add(b);
				adlist[b].add(a);
			}
			for (int z = 1; z <= V; z++) {
				if (c[z] == 0)
					dfs(z, 1, adlist, c);
			}

			int flag = 0;
			Label: for (int k = 1; k <= V; k++) {
				for (int w = 0; w < adlist[k].size(); w++) {
					if (c[k] == c[adlist[k].get(w)]) {
						flag = 1;
						break Label;
					}
				}
			}
			if (flag == 1)
				System.out.println("NO");
			else
				System.out.println("YES");

		}

	}

}
