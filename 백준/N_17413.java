//백준 17413번
/*문제
문자열 S가 주어졌을 때, 이 문자열에서 단어만 뒤집으려고 한다.

먼저, 문자열 S는 아래와과 같은 규칙을 지킨다.

알파벳 소문자('a'-'z'), 숫자('0'-'9'), 공백(' '), 특수 문자('<', '>')로만 이루어져 있다.
문자열의 시작과 끝은 공백이 아니다.
'<'와 '>'가 문자열에 있는 경우 번갈아가면서 등장하며, '<'이 먼저 등장한다. 또, 두 문자의 개수는 같다.
태그는 '<'로 시작해서 '>'로 끝나는 길이가 3 이상인 부분 문자열이고, '<'와 '>' 사이에는 알파벳 소문자와 공백만 있다. 단어는 알파벳 소문자와 숫자로 이루어진 부분 문자열이고, 연속하는 두 단어는 공백 하나로 구분한다. 태그는 단어가 아니며, 태그와 단어 사이에는 공백이 없다.

입력
첫째 줄에 문자열 S가 주어진다. S의 길이는 100,000 이하이다.

출력
첫째 줄에 문자열 S의 단어를 뒤집어서 출력한다.*/

package codingtest_study.백준;

import java.util.Scanner;
import java.util.Stack;

public class N_17413 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner s = new Scanner(System.in);
		String sentence = s.nextLine() + '\n';
		Stack<Character> st = new Stack<Character>();
		StringBuilder result = new StringBuilder();
		int is_tag = 0;

		for (int i = 0; i < sentence.length(); i++) {
			if (sentence.charAt(i) == '<'){
				is_tag = 1;
				
				//사실 이 조건은 필요없음
				/*if(i != 0 && sentence.charAt(i-1) != '>'){
					while(!st.empty())
						result.append(st.pop());
				}*/
				while(!st.empty())
					result.append(st.pop());
			}
			

			if (is_tag == 0 && (sentence.charAt(i) == ' ' || sentence.charAt(i) == '\n')) {
				while (!st.isEmpty())
					result.append(st.pop());
				result.append(sentence.charAt(i));
				continue;
			}
			if (is_tag == 0) {
				st.push(sentence.charAt(i));
			} else if (is_tag == 1) {
				result.append(sentence.charAt(i));
			}
			if (sentence.charAt(i) == '>')
				is_tag = 0;

		}
		System.out.println(result);
	}

}
