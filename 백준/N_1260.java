//백준 1260번
/*문제
그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.

입력
첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.

출력
첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.*/

package 백준;

import java.util.*;

public class N_1260 {
	static boolean[] c = new boolean[1001];
	static boolean[] c1 = new boolean[1001];
	static Queue<Integer> q = new LinkedList<Integer>();

	static void go(int v, ArrayList<Integer>[] adlist) {
		if (c[v]) {
			return;
		}
		c[v] = true;
		System.out.print(v + " ");

		for (int a : adlist[v]) {
			if (c[a] == false)
				go(a, adlist);
		}
	}

	static void bfs(int v, ArrayList<Integer>[] adlist) {
		c1[v] = true;
		q.offer(v);
		while (!q.isEmpty()) {
			int a = q.poll();
			System.out.print(a + " ");
			for (int i : adlist[a]) {
				if (c1[i] == false) {
					q.offer(i);
					c1[i] = true;
				}

			}
		}

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner s = new Scanner(System.in);
		int N = s.nextInt();
		int M = s.nextInt();
		int V = s.nextInt();
		ArrayList<Integer>[] adlist = (ArrayList<Integer>[]) new ArrayList[N + 1];
		for (int i = 1; i <= N; i++)
			adlist[i] = new ArrayList<Integer>();
		for (int i = 1; i <= M; i++) {
			int a = s.nextInt();
			int b = s.nextInt();
			adlist[a].add(b);
			adlist[b].add(a);
		}
		for (int i = 1; i <= N; i++)
			Collections.sort(adlist[i]);
		go(V, adlist);
		System.out.println();
		bfs(V, adlist);
		System.out.println();
	}

}
